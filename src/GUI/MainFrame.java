/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Checker.detector;
import CpuSimulation.FCFS;
import CpuSimulation.RR;
import CpuSimulation.SRTF;
import CpuSimulation.Scheduler.Task;
import static CpuSimulation.Scheduler.Task.orderByRemainingWorkload;
import CpuSimulation.Scheduler.TaskGenerator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Timer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

/**
 *
 * @author Billy it21370
 */
public class MainFrame extends javax.swing.JFrame {

    private static BlockingQueue<Task> TaskList = new <Task>ArrayBlockingQueue(Integer.MAX_VALUE / 10);
    private static ArrayList<Task> CompleteTaskList = new <Task>ArrayList();
    private static ArrayList<Task> Before = new <Task>ArrayList();
    private static boolean Running = false;
    private static AtomicInteger TotalTasks = new AtomicInteger(100);
    private static int CpuCores = 1;
    private static String selectedMethod = "RR";
    private static int Quantum = 5;
    private static TaskGenerator TG;
    private static int GenId = 0;
    private static Timer detect;
    private static long start = 0;
    private static int starvations = 0;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        RRPanel = new javax.swing.JPanel();
        RRcore = new javax.swing.JPanel();
        RRcore1 = new javax.swing.JLabel();
        RRcore2 = new javax.swing.JLabel();
        RRcore4 = new javax.swing.JLabel();
        RRcore5 = new javax.swing.JLabel();
        RRcore6 = new javax.swing.JLabel();
        RRcore7 = new javax.swing.JLabel();
        RRcore8 = new javax.swing.JLabel();
        RRcore3 = new javax.swing.JLabel();
        RRAvgWaitting = new javax.swing.JLabel();
        RRAvgResponse = new javax.swing.JLabel();
        RRstarvations = new javax.swing.JLabel();
        RRComp = new javax.swing.JLabel();
        RRCompProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        TotalCompLabel = new javax.swing.JLabel();
        TotalStarvationsLabel = new javax.swing.JLabel();
        TotalTasksLabel = new javax.swing.JLabel();
        RRPanel1 = new javax.swing.JPanel();
        FCFSStarvations = new javax.swing.JLabel();
        FCFSComp = new javax.swing.JLabel();
        FCFSCompProgressBar = new javax.swing.JProgressBar();
        FCFSAvgWaitting = new javax.swing.JLabel();
        FCFSAvgResponse = new javax.swing.JLabel();
        RRcore9 = new javax.swing.JPanel();
        FCFScore1 = new javax.swing.JLabel();
        FCFScore2 = new javax.swing.JLabel();
        FCFScore4 = new javax.swing.JLabel();
        FCFScore5 = new javax.swing.JLabel();
        FCFScore6 = new javax.swing.JLabel();
        FCFScore7 = new javax.swing.JLabel();
        FCFScore8 = new javax.swing.JLabel();
        FCFScore3 = new javax.swing.JLabel();
        RRPanel2 = new javax.swing.JPanel();
        CorePanel5 = new javax.swing.JPanel();
        SRTFcore1 = new javax.swing.JLabel();
        SRTFcore2 = new javax.swing.JLabel();
        SRTFcore3 = new javax.swing.JLabel();
        SRTFcore4 = new javax.swing.JLabel();
        SRTFcore5 = new javax.swing.JLabel();
        SRTFcore6 = new javax.swing.JLabel();
        SRTFcore7 = new javax.swing.JLabel();
        SRTFcore8 = new javax.swing.JLabel();
        SRTFComp = new javax.swing.JLabel();
        SRTFCompProgressBar = new javax.swing.JProgressBar();
        SRTFAvgWaitting = new javax.swing.JLabel();
        SRTFAvgResponse = new javax.swing.JLabel();
        SRTFstarvations = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        CoresComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        QuantumComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        UseCombo = new javax.swing.JComboBox();
        StartButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RRPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "RR"));

        RRcore.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "CPU Total Cycles :"));

        RRcore1.setText("Core 1: N/A");

        RRcore2.setText("Core 2: N/A");

        RRcore4.setText("Core 4: N/A");

        RRcore5.setText("Core 5: N/A");

        RRcore6.setText("Core 6: N/A");

        RRcore7.setText("Core 7: N/A");

        RRcore8.setText("Core 8: N/A");

        RRcore3.setText("Core 3: N/A");

        javax.swing.GroupLayout RRcoreLayout = new javax.swing.GroupLayout(RRcore);
        RRcore.setLayout(RRcoreLayout);
        RRcoreLayout.setHorizontalGroup(
            RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RRcoreLayout.createSequentialGroup()
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RRcoreLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RRcore3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RRcore4)
                            .addComponent(RRcore2)))
                    .addComponent(RRcore1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(RRcore6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RRcore7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RRcore8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RRcore5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        RRcoreLayout.setVerticalGroup(
            RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RRcoreLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RRcore1)
                    .addComponent(RRcore5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RRcore2)
                    .addComponent(RRcore6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RRcore7)
                    .addComponent(RRcore3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RRcore4)
                    .addComponent(RRcore8))
                .addGap(2, 2, 2))
        );

        RRAvgWaitting.setText("AvgWaitingTime: N/A");

        RRAvgResponse.setText("AvgResponseTime: N/A");

        RRstarvations.setText("Starvations the last 5\": N/A");

        RRComp.setText("Completed: N/A");

        javax.swing.GroupLayout RRPanelLayout = new javax.swing.GroupLayout(RRPanel);
        RRPanel.setLayout(RRPanelLayout);
        RRPanelLayout.setHorizontalGroup(
            RRPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RRPanelLayout.createSequentialGroup()
                .addGroup(RRPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RRPanelLayout.createSequentialGroup()
                        .addComponent(RRComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RRCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RRstarvations)
                    .addComponent(RRAvgResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RRAvgWaitting, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(RRcore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        RRPanelLayout.setVerticalGroup(
            RRPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RRcore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RRPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(RRAvgWaitting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RRAvgResponse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RRstarvations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RRComp)
                    .addComponent(RRCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "General Infos"));

        LogTextArea.setColumns(20);
        LogTextArea.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        LogTextArea.setRows(5);
        jScrollPane1.setViewportView(LogTextArea);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Totals"));

        TotalCompLabel.setText("Total Completed : 0");

        TotalStarvationsLabel.setText("Total Starvations : 0");

        TotalTasksLabel.setText("Total Tasks : 0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(TotalCompLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TotalStarvationsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TotalTasksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(TotalCompLabel)
                .addComponent(TotalStarvationsLabel)
                .addComponent(TotalTasksLabel))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        RRPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "FCFS"));

        FCFSStarvations.setText("Starvations the last 5\": N/A");

        FCFSComp.setText("Completed: N/A");

        FCFSAvgWaitting.setText("AvgWaitingTime: N/A");

        FCFSAvgResponse.setText("AvgResponseTime: N/A");

        RRcore9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "CPU Total Cycles :"));

        FCFScore1.setText("Core 1: N/A");

        FCFScore2.setText("Core 2: N/A");

        FCFScore4.setText("Core 4: N/A");

        FCFScore5.setText("Core 5: N/A");

        FCFScore6.setText("Core 6: N/A");

        FCFScore7.setText("Core 7: N/A");

        FCFScore8.setText("Core 8: N/A");

        FCFScore3.setText("Core 3: N/A");

        javax.swing.GroupLayout RRcore9Layout = new javax.swing.GroupLayout(RRcore9);
        RRcore9.setLayout(RRcore9Layout);
        RRcore9Layout.setHorizontalGroup(
            RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RRcore9Layout.createSequentialGroup()
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RRcore9Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FCFScore3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FCFScore4)
                            .addComponent(FCFScore2)))
                    .addComponent(FCFScore1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(FCFScore6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FCFScore7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FCFScore8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FCFScore5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        RRcore9Layout.setVerticalGroup(
            RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RRcore9Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FCFScore1)
                    .addComponent(FCFScore5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FCFScore2)
                    .addComponent(FCFScore6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FCFScore7)
                    .addComponent(FCFScore3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RRcore9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FCFScore4)
                    .addComponent(FCFScore8))
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout RRPanel1Layout = new javax.swing.GroupLayout(RRPanel1);
        RRPanel1.setLayout(RRPanel1Layout);
        RRPanel1Layout.setHorizontalGroup(
            RRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RRPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(RRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RRPanel1Layout.createSequentialGroup()
                        .addComponent(FCFSComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FCFSCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FCFSAvgWaitting, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FCFSAvgResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FCFSStarvations))
                .addGap(47, 47, 47)
                .addComponent(RRcore9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RRPanel1Layout.setVerticalGroup(
            RRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RRPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(RRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RRcore9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, RRPanel1Layout.createSequentialGroup()
                        .addComponent(FCFSAvgWaitting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FCFSAvgResponse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FCFSStarvations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(RRPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FCFSComp)
                            .addComponent(FCFSCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2))
        );

        RRPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "SRTF"));

        CorePanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "CPU Total Cycles :"));

        SRTFcore1.setText("Core 1: N/A");

        SRTFcore2.setText("Core 2: N/A");

        SRTFcore3.setText("Core 3: N/A");

        SRTFcore4.setText("Core 4: N/A");

        SRTFcore5.setText("Core 5: N/A");

        SRTFcore6.setText("Core 6: N/A");

        SRTFcore7.setText("Core 7: N/A");

        SRTFcore8.setText("Core 8: N/A");

        javax.swing.GroupLayout CorePanel5Layout = new javax.swing.GroupLayout(CorePanel5);
        CorePanel5.setLayout(CorePanel5Layout);
        CorePanel5Layout.setHorizontalGroup(
            CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorePanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SRTFcore3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CorePanel5Layout.createSequentialGroup()
                        .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SRTFcore1)
                            .addComponent(SRTFcore2)
                            .addComponent(SRTFcore4))
                        .addGap(114, 114, 114)
                        .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SRTFcore8)
                            .addComponent(SRTFcore6)
                            .addComponent(SRTFcore5)
                            .addComponent(SRTFcore7))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        CorePanel5Layout.setVerticalGroup(
            CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorePanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SRTFcore1)
                    .addComponent(SRTFcore5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SRTFcore2)
                    .addComponent(SRTFcore6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SRTFcore3)
                    .addComponent(SRTFcore7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CorePanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SRTFcore4)
                    .addComponent(SRTFcore8))
                .addGap(2, 2, 2))
        );

        SRTFComp.setText("Completed: N/A");

        SRTFAvgWaitting.setText("AvgWaitingTime: N/A");

        SRTFAvgResponse.setText("AvgResponseTime: N/A");

        SRTFstarvations.setText("Starvations the last 5\": N/A");

        javax.swing.GroupLayout RRPanel2Layout = new javax.swing.GroupLayout(RRPanel2);
        RRPanel2.setLayout(RRPanel2Layout);
        RRPanel2Layout.setHorizontalGroup(
            RRPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RRPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(RRPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SRTFAvgWaitting, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SRTFAvgResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SRTFstarvations)
                    .addGroup(RRPanel2Layout.createSequentialGroup()
                        .addComponent(SRTFComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(SRTFCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addComponent(CorePanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        RRPanel2Layout.setVerticalGroup(
            RRPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CorePanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RRPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SRTFAvgWaitting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SRTFAvgResponse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SRTFstarvations)
                .addGap(10, 10, 10)
                .addGroup(RRPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SRTFComp)
                    .addComponent(SRTFCompProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Cores :");

        CoresComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "4", "8" }));
        CoresComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoresComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantum :");

        QuantumComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15" }));
        QuantumComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantumComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Use :");

        UseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RR", "FCFS", "SRTF" }));
        UseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseComboActionPerformed(evt);
            }
        });

        StartButton.setText("Start ");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CoresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QuantumComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(UseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(CoresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(QuantumComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(RRPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RRPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RRPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RRPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RRPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RRPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void StarvationsUpdate(int Starvations) {
        switch (selectedMethod) {
            case "RR":
                RRstarvations.setText("Starvations the last 5\": " + Starvations);
                break;
            case "FCFS":
                FCFSStarvations.setText("Starvations the last 5\": " + Starvations);
                break;
            case "SRTF":
                SRTFstarvations.setText("Starvations the last 5\": " + Starvations);
                break;
        }
        starvations += Starvations;
        TotalStarvationsLabel.setText("Total Starvations : " + starvations);
    }

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed

        Running = !Running;

        if (Running) {
            //works
            CompleteTaskList.clear();
            starvations = 0;
            TotalTasks = new AtomicInteger(0);
            startGen(GenId, Integer.MAX_VALUE / 10);
            startSimulation();
            detect = new Timer();
            detect.schedule(new detector(), 0, 5000);
            StartButton.setText("Stop");
            TotalTasksLabel.setText("Total Tasks : 0");
            TotalStarvationsLabel.setText("Total Starvations : 0");

            Startednew();
        } else {
            LogTextArea.append(System.lineSeparator() + "STOPED");
            GenId = TG.stopGEN();
            detect.cancel();
            StartButton.setText("Start");
        }

        userControlls(Running);

    }//GEN-LAST:event_StartButtonActionPerformed

    public void startGen(int GenId, int limit) {
        TG = new TaskGenerator(GenId, limit);
        TG.start();
    }

    private static void userControlls(boolean isActive) {
        CoresComboBox.setEnabled(!isActive);
        QuantumComboBox.setEnabled(!isActive);
        UseCombo.setEnabled(!isActive);

    }
    private void CoresComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoresComboBoxActionPerformed
        CpuCores = Integer.parseInt("" + CoresComboBox.getSelectedItem());
    }//GEN-LAST:event_CoresComboBoxActionPerformed

    private void UseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseComboActionPerformed
        selectedMethod = "" + UseCombo.getSelectedItem();
        if (selectedMethod.equals("RR")) {
            QuantumComboBox.setEnabled(true);
        } else {
            QuantumComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_UseComboActionPerformed

    private void QuantumComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantumComboBoxActionPerformed
        Quantum = Integer.parseInt("" + QuantumComboBox.getSelectedItem());
    }//GEN-LAST:event_QuantumComboBoxActionPerformed
    static int Log = 0;

    public static void add2LogTextArea(String txt) {
        Log++;
        LogTextArea.append(System.lineSeparator() + Log + ")" + txt);

        if (Log % 12 == 0) {
            Running = false;
            LogTextArea.append(System.lineSeparator() + "-----------STOPED-----------");
            GenId = TG.stopGEN();
            detect.cancel();
            StartButton.setText("Start");
            Log = 0;
            userControlls(Running);
        }
    }

    public static void reportStarvation(int id) {
        LogTextArea.append(System.lineSeparator() + " Task " + id + " can cause starvation in case of SRTF.");
    }

    private static void Startednew() {
        LogTextArea.append(System.lineSeparator() + "Started Simulation:" + System.lineSeparator() + "Cores :" + CpuCores + System.lineSeparator() + "Quantum (only for RR):" + Quantum + System.lineSeparator() + "Sceduler :" + selectedMethod + System.lineSeparator());
    }

    public static void updateTimes(long RT, long WT) {
        switch (selectedMethod) {
            case "RR":
                RRAvgResponse.setText("AvgResponseTime: " + RT);
                RRAvgWaitting.setText("AvgWaitingTime: " + WT);
                break;
            case "FCFS":
                FCFSAvgResponse.setText("AvgResponseTime: " + RT);
                FCFSAvgWaitting.setText("AvgWaitingTime: " + WT);
                break;
            case "SRTF":
                SRTFAvgResponse.setText("AvgResponseTime: " + RT);
                SRTFAvgWaitting.setText("AvgWaitingTime: " + WT);
                break;
        }
    }

    public static void updateTotalTasks(int i) {
        TotalTasksLabel.setText("Total Tasks : " + i);
    }

    private void startSimulation() {
        RR rr = null;
        FCFS fcfs = null;
        SRTF srtf = null;
        for (int i = 0; i < CpuCores; i++) {

            switch (selectedMethod) {
                case "RR":
                    rr = new RR(Quantum, i);
                    rr.start();
                    break;
                case "FCFS":
                    fcfs = new FCFS(i);
                    fcfs.start();
                    break;
                case "SRTF":
                    srtf = new SRTF(i);
                    srtf.start();
                    break;
            }
        }
    }

    /**
     * This method searches for available tasks in case of RR. If there is any
     * available task returns null
     *
     *
     * @return
     * @see Task
     */
    public static Task getNotShortedTask() {
        return TaskList.poll();
    }

    static CopyOnWriteArrayList<Task> AlTaskList = new <Task>CopyOnWriteArrayList();

    public synchronized static Task getShortedTask() {
        Task t = Collections.min(AlTaskList, orderByRemainingWorkload());
        AlTaskList.remove(t);
        return t;
    }

    /**
     * This method informs the running scheduling method and the real-time task
     * creation process if the user wants the simulation to stop.
     *
     * Returns true if user wants to stop the process and false in opposite case
     *
     * @return
     * @see Task
     */
    public static boolean isRunning() {
        return Running;
    }

    public static int QueueSize() {
        return TaskList.size();
    }

    public static BlockingQueue getTaskList() {
        return TaskList;
    }

    public static int CompleteQueueSize() {
        return CompleteTaskList.size();
    }

    public static void addCompleteQueue(Task t) {
        CompleteTaskList.add(t);
    }

    public static ArrayList<Task> getCompleteTaskList() {
        return CompleteTaskList;
    }

    /**
     * This method removes the completed tasks from task TaskList. Also
     * registers the completed tasks in the CompleteTaskList
     *
     *
     * @param t the task that is to be added in the CompleteTaskList, the
     * completed task
     *
     * @see Task
     */
    public synchronized static void taskCompleted(Task t) {
        CompleteTaskList.add(t);
        TotalCompLabel.setText("Total Completed : " + CompleteTaskList.size());
    }

    /**
     * This method reorders the task in the TaskList.
     *
     *
     * @param t the task after edited
     *
     * @see Task
     */
    public static void RRreorder(Task t) {
        TaskList.remove(t);
        TaskList.add(t);

    }

    public static void setBefore(Task[] Checked, long start, long stop) {
        Before = new <Task>ArrayList();
        for (int i = 0; i < Checked.length; i++) {
            if (Checked[i].getLastUsedTime() <= stop && Checked[i].getLastUsedTime() >= start) {
                Before.add(Checked[i]);
            }
        }
    }

    public static void updateRRcpuCycles(int WhichCoreAmI, int timeElapsed) {

        switch (WhichCoreAmI) {
            case 0:
                RRcore1.setText("Core 1: " + timeElapsed);
                break;
            case 1:
                RRcore2.setText("Core 2: " + timeElapsed);
                break;
            case 2:
                RRcore3.setText("Core 3: " + timeElapsed);
                break;
            case 3:
                RRcore4.setText("Core 4: " + timeElapsed);
                break;
            case 4:
                RRcore5.setText("Core 5: " + timeElapsed);
                break;
            case 5:
                RRcore6.setText("Core 6: " + timeElapsed);
                break;
            case 6:
                RRcore7.setText("Core 7: " + timeElapsed);
                break;
            case 7:
                RRcore8.setText("Core 8: " + timeElapsed);
                break;
        }
    }

    /**updates FCFS Cycles
     *
     * @param WhichCoreAmI
     * @param timeElapsed
     */
    public static void updateFCFSCycles(int WhichCoreAmI, int timeElapsed) {

        switch (WhichCoreAmI) {
            case 0:
                FCFScore1.setText("Core 1: " + timeElapsed);
                break;
            case 1:
                FCFScore2.setText("Core 2: " + timeElapsed);
                break;
            case 2:
                FCFScore3.setText("Core 3: " + timeElapsed);
                break;
            case 3:
                FCFScore4.setText("Core 4: " + timeElapsed);
                break;
            case 4:
                FCFScore5.setText("Core 5: " + timeElapsed);
                break;
            case 5:
                FCFScore6.setText("Core 6: " + timeElapsed);
                break;
            case 6:
                FCFScore7.setText("Core 7: " + timeElapsed);
                break;
            case 7:
                FCFScore8.setText("Core 8: " + timeElapsed);
                break;
        }

    }

    /**update SRTF  Cycles
     *
     * @param WhichCoreAmI
     * @param timeElapsed
     */
    public static void updateSRTFcpuCycles(int WhichCoreAmI, int timeElapsed) {

        switch (WhichCoreAmI) {
            case 0:
                SRTFcore1.setText("Core 1: " + timeElapsed);
                break;
            case 1:
                SRTFcore2.setText("Core 2: " + timeElapsed);
                break;
            case 2:
                SRTFcore3.setText("Core 3: " + timeElapsed);
                break;
            case 3:
                SRTFcore4.setText("Core 4: " + timeElapsed);
                break;
            case 4:
                SRTFcore5.setText("Core 5: " + timeElapsed);
                break;
            case 5:
                SRTFcore6.setText("Core 6: " + timeElapsed);
                break;
            case 6:
                SRTFcore7.setText("Core 7: " + timeElapsed);
                break;
            case 7:
                SRTFcore8.setText("Core 8: " + timeElapsed);
                break;
        }

    }

    public static void TotalIncrement() {
        updateTotalTasks(Integer.parseInt("" + TotalTasks.addAndGet(1)));
    }

    public static void RefillTaskList(Task Fuel) {
        if (selectedMethod.equals("SRTF")) {
            AlTaskList.add(Fuel);
        } else {
            TaskList.add(Fuel);
        }
    }

    public static long getStart() {
        return start;
    }

    public static void setStart(long start) {
        MainFrame.start = start;
    }

    public static Task[] BQ2Array() {
        Task[] toBeChecked;
        if (selectedMethod.equals("SRTF")) {
            toBeChecked = AlTaskList.toArray(new Task[0]);
        } else {
            toBeChecked = TaskList.toArray(new Task[0]);

        }
        return toBeChecked;
    }

    public static ArrayList<Task> getBefore() {
        return Before;
    }

    public synchronized static void setCompleteTaskList(ArrayList<Task> CompleteTaskList) {
        MainFrame.CompleteTaskList = CompleteTaskList;
    }

    static int lastCompl;

    public static void complBars(int x) {
        switch (selectedMethod) {
            case "RR":
                RRCompProgressBar.setValue(x);
                RRComp.setText("Completed: " + x + "%");
                break;
            case "FCFS":
                FCFSCompProgressBar.setValue(x);
                FCFSComp.setText("Completed: " + x + "%");
                break;
            case "SRTF":
                SRTFCompProgressBar.setValue(x);
                SRTFComp.setText("Completed: " + x + "%");
                break;
        }
        lastCompl = +x;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CorePanel5;
    private static javax.swing.JComboBox CoresComboBox;
    private static javax.swing.JLabel FCFSAvgResponse;
    private static javax.swing.JLabel FCFSAvgWaitting;
    private static javax.swing.JLabel FCFSComp;
    private static javax.swing.JProgressBar FCFSCompProgressBar;
    private static javax.swing.JLabel FCFSStarvations;
    private static javax.swing.JLabel FCFScore1;
    private static javax.swing.JLabel FCFScore2;
    private static javax.swing.JLabel FCFScore3;
    private static javax.swing.JLabel FCFScore4;
    private static javax.swing.JLabel FCFScore5;
    private static javax.swing.JLabel FCFScore6;
    private static javax.swing.JLabel FCFScore7;
    private static javax.swing.JLabel FCFScore8;
    private static javax.swing.JTextArea LogTextArea;
    private static javax.swing.JComboBox QuantumComboBox;
    private static javax.swing.JLabel RRAvgResponse;
    private static javax.swing.JLabel RRAvgWaitting;
    private static javax.swing.JLabel RRComp;
    private static javax.swing.JProgressBar RRCompProgressBar;
    private javax.swing.JPanel RRPanel;
    private javax.swing.JPanel RRPanel1;
    private javax.swing.JPanel RRPanel2;
    private javax.swing.JPanel RRcore;
    private static javax.swing.JLabel RRcore1;
    private static javax.swing.JLabel RRcore2;
    private static javax.swing.JLabel RRcore3;
    private static javax.swing.JLabel RRcore4;
    private static javax.swing.JLabel RRcore5;
    private static javax.swing.JLabel RRcore6;
    private static javax.swing.JLabel RRcore7;
    private static javax.swing.JLabel RRcore8;
    private javax.swing.JPanel RRcore9;
    private static javax.swing.JLabel RRstarvations;
    private static javax.swing.JLabel SRTFAvgResponse;
    private static javax.swing.JLabel SRTFAvgWaitting;
    private static javax.swing.JLabel SRTFComp;
    private static javax.swing.JProgressBar SRTFCompProgressBar;
    private static javax.swing.JLabel SRTFcore1;
    private static javax.swing.JLabel SRTFcore2;
    private static javax.swing.JLabel SRTFcore3;
    private static javax.swing.JLabel SRTFcore4;
    private static javax.swing.JLabel SRTFcore5;
    private static javax.swing.JLabel SRTFcore6;
    private static javax.swing.JLabel SRTFcore7;
    private static javax.swing.JLabel SRTFcore8;
    private static javax.swing.JLabel SRTFstarvations;
    private static javax.swing.JButton StartButton;
    private static javax.swing.JLabel TotalCompLabel;
    private static javax.swing.JLabel TotalStarvationsLabel;
    private static javax.swing.JLabel TotalTasksLabel;
    private static javax.swing.JComboBox UseCombo;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
